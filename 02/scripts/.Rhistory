install.packages("drat", repos="https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("xgboost", repos="http://dmlc.ml/drat/", type = "source")
drat:::addRepo("dmlc")
install.packages("xgboost", repos="http://dmlc.ml/drat/", type = "source")
install.packages("magrittr")
install.packages("data.table")
install.packages("stringr")
install.packages("xgboost", repos="http://dmlc.ml/drat/", type = "source")
install.packages("pander")
install.packages("DT")
install.packages("XLConnect")
install.packages("XLConnectJars’")
install.packages("XLConnect", dependencies = TRUE)
install.packages("XLConnect")
install.packages("rJava")
install.packages("XLConnect")
install.packages("rJava")
install.packages("XLConnect")
install.packages("XLConnect", dependencies = TRUE)
install.packages("XLConnect", dependencies = TRUE)
install.packages("shiny", dependencies = TRUE)
shiny::runApp('01-projects/01-sputnik/task_14 (changes in quality_stability)')
shiny::runApp('01-projects/01-sputnik/task_14 (changes in quality_stability)')
shiny::runApp('01-projects/01-sputnik/task_14 (changes in quality_stability)')
shiny::runApp('01-projects/01-sputnik/task_14 (changes in quality_stability)')
shiny::runApp('01-projects/01-sputnik/task_14 (changes in quality_stability)')
temp <- readRDS("/home/nick/01-projects/01-sputnik/task_14 (changes in quality_stability)/results/quality_stability_07_03_2016.RDS")
qd_1 <-temp[[1]]
qd_2 <-temp[[1]]
q_1 <-temp[[2]]
View(q_1)
shiny::runApp('01-projects/01-sputnik/task_14 (changes in quality_stability)')
shiny::runApp('01-projects/01-sputnik/task_14 (changes in quality_stability)')
load('tun_train.RDA')
#
load('tun_test.RDA')
setwd("/home/nick/01-projects/07-competitions/02/scripts/")
#
load('tun_train.RDA')
#
load('tun_test.RDA')
save(list(train =tun_train , test= tun_test),file='tun_all.RDA')
tun_all <- list(train =tun_train , test= tun_test)
save(tun_all,file='tun_all.RDA')
load(file='rfensemble2.RDA')
modelLookup("xgbLinear")
library(caret)
modelLookup("xgbLinear")
modelLookup("binary:logistic")
modelLookup("logistic")
load(file='rfensemble_200.RDA')
varImpPlot(rfensemble$rf1)
library(randomForest)
varImpPlot(rfensemble$rf1)
randomForest(rfensemble$rf1)
print(rfensemble$rf1)
print(rfensemble$rf1$oob.times )
print(rfensemble$rf1$forest )
print(rfensemble$rf1$mtry )
print(rfensemble$rf2$mtry )
rfensemble$rf1$confusion[, 'class.error']
OOB.votes <- predict (rfensemble$rf1,tun_train,type="prob");
OOB.pred <- OOB.votes[,2];
pred.obj <- prediction (OOB.pred, tun_train$TARGET);
OOB.pred
pred.obj <- confusionMatrix (OOB.pred, tun_train$TARGET);
formatrix <- table (OOB.votes ,as.factor(tun_train$TARGET))
confusionMatrix(formatrix)
OOB.votes <- predict (rfensemble$rf1,tun_train)
formatrix <- table (OOB.votes ,as.factor(tun_train$TARGET))
confusionMatrix(formatrix)
OOB.pred [1:10,]
OOB.pred [1:10]
auc(OOB.pred ,as.numeric(as.ccharacter(tun_train$TARGET)))
library('pROC')
auc(OOB.pred ,as.numeric(as.ccharacter(tun_train$TARGET)))
auc(OOB.pred ,as.numeric(as.character(tun_train$TARGET)))
as.numeric(as.character(tun_train$TARGET))
OOB.votes <- predict (rfensemble$rf2,tun_train)
OOB.pred <- OOB.votes[,2];
#OOB.pred [1:10]
auc(OOB.pred ,as.numeric(as.character(tun_train$TARGET)))
OOB.votes <- predict (rfensemble$rf3,tun_train)
OOB.pred <- OOB.votes[,2];
#OOB.pred [1:10]
auc(OOB.pred ,as.numeric(as.character(tun_train$TARGET)))
train_auc <- auc(OOB.pred ,as.numeric(as.character(tun_train$TARGET)))
print(train_auc)
train_auc <- auc(as.numeric(as.character(tun_train$TARGET)),as.numeric(as.character(tun_train$TARGET)))
print(train_auc)
train_auc <-auc(as.numeric(as.character(tun_train$TARGET)), OOB.pred )
print(train_auc)
OOB.votes <- predict (rfensemble$rf1,tun_train)
OOB.pred <- OOB.votes[,2];
#OOB.pred [1:10]
train_auc <-auc(as.numeric(as.character(tun_train$TARGET)), OOB.pred )
print(train_auc)
OOB.votes <- predict (rfensemble$rf2,tun_train)
OOB.pred <- OOB.votes[,2];
#OOB.pred [1:10]
train_auc <-auc(as.numeric(as.character(tun_train$TARGET)), OOB.pred )
print(train_auc)
OOB.votes <- predict (rfensemble$rf2,tun_train,type="prob")
OOB.pred <- OOB.votes[,2];
#OOB.pred [1:10]
train_auc <-auc(as.numeric(as.character(tun_train$TARGET)), OOB.pred )
print(train_auc)
OOB.votes <- predict (rfensemble$rf1,tun_train,type="prob")
OB.pred <- OOB.votes[,2];
#OOB.pred [1:10]
train_auc <-auc(as.numeric(as.character(tun_train$TARGET)), OOB.pred )
print(train_auc)
OOB.votes <- predict (rfensemble$rf3,tun_train,type="prob")
OOB.pred <- OOB.votes[,2];
#OOB.pred [1:10]
train_auc <-auc(as.numeric(as.character(tun_train$TARGET)), OOB.pred )
print(train_auc)
OOB.votes <- predict (rfensemble$rf4,tun_train,type="prob")
OOB.pred <- OOB.votes[,2];
#OOB.pred [1:10]
train_auc <-auc(as.numeric(as.character(tun_train$TARGET)), OOB.pred )
print(train_auc)
OOB.votes <- predict (rfensemble$rf5,tun_train,type="prob")
OOB.pred <- OOB.votes[,2];
#OOB.pred [1:10]
train_auc <-auc(as.numeric(as.character(tun_train$TARGET)), OOB.pred )
print(train_auc)
#PATH <- "/home/nazarov/07-competitions/02/data/"
#PATH_2 <- "/home/nazarov/Рабочий стол/santander.pdf"
PATH <- "/home/nick/01-projects/07-competitions/02/data/"
PATH_2 <- "/home/nick/Рабочий стол/santander.pdf"
N_CAT <- 15
FOR_SEED <- 1234
PCT <- 0.3
N_FACTORS <- 1:30
cat("Getting data\n")
print(system.time(x_raw <- getData(PATH)))
cat("Getting data\n")
print(system.time(x_raw <- getData(PATH)))
source("lib_func.R")
cat("Getting data\n")
print(system.time(x_raw <- getData(PATH)))
pred <- predict (rfensemble$rf2,tun_test,type="prob")
# SAVE
submission <- data.frame(ID = x$test$ID, TARGET = pred)
write.csv(submission, 'rf_2.csv', row.names=FALSE, quote = FALSE)
submission <- data.frame(ID = x_raw$test$ID, TARGET = pred)
write.csv(submission, 'rf_2.csv', row.names=FALSE, quote = FALSE)
pred <- predict (rfensemble$rf2,tun_test)
submission <- data.frame(ID = x_raw$test$ID, TARGET = pred)
write.csv(submission, 'rf_2.csv', row.names=FALSE, quote = FALSE)
pred <- predict (rfensemble$rf2,tun_test, type="prob")
# SAVE
submission <- data.frame(ID = x_raw$test$ID, TARGET = pred[,2])
write.csv(submission, 'rf_2.csv', row.names=FALSE, quote = FALSE)
pred <- predict (rfensemble$rf4,tun_test, type="prob")
# SAVE
submission <- data.frame(ID = x_raw$test$ID, TARGET = pred[,2])
write.csv(submission, 'rf_4.csv', row.names=FALSE, quote = FALSE)
load(file='rfensemble_300.RDA')
OOB.votes <- predict (rfensemble$rf4,tun_train,type="prob")
train_auc <-auc(as.numeric(as.character(tun_train$TARGET)), OOB.pred )
print(train_auc)
rm(rfensemble)
gc(reset=TRUE)
