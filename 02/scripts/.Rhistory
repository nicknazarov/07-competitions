install.packages("drat", repos="https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("xgboost", repos="http://dmlc.ml/drat/", type = "source")
drat:::addRepo("dmlc")
install.packages("xgboost", repos="http://dmlc.ml/drat/", type = "source")
install.packages("magrittr")
install.packages("data.table")
install.packages("stringr")
install.packages("xgboost", repos="http://dmlc.ml/drat/", type = "source")
install.packages("pander")
install.packages("DT")
install.packages("XLConnect")
install.packages("XLConnectJarsâ€™")
install.packages("XLConnect", dependencies = TRUE)
install.packages("XLConnect")
install.packages("rJava")
install.packages("XLConnect")
install.packages("rJava")
install.packages("XLConnect")
install.packages("XLConnect", dependencies = TRUE)
install.packages("XLConnect", dependencies = TRUE)
install.packages("shiny", dependencies = TRUE)
shiny::runApp('01-projects/01-sputnik/task_14 (changes in quality_stability)')
shiny::runApp('01-projects/01-sputnik/task_14 (changes in quality_stability)')
shiny::runApp('01-projects/01-sputnik/task_14 (changes in quality_stability)')
shiny::runApp('01-projects/01-sputnik/task_14 (changes in quality_stability)')
shiny::runApp('01-projects/01-sputnik/task_14 (changes in quality_stability)')
temp <- readRDS("/home/nick/01-projects/01-sputnik/task_14 (changes in quality_stability)/results/quality_stability_07_03_2016.RDS")
qd_1 <-temp[[1]]
qd_2 <-temp[[1]]
q_1 <-temp[[2]]
View(q_1)
shiny::runApp('01-projects/01-sputnik/task_14 (changes in quality_stability)')
shiny::runApp('01-projects/01-sputnik/task_14 (changes in quality_stability)')
library('caret')
load('tun_train.RDA')
sub_train <- subSample(x, 0.02, top_N_features)$training
tr <- trainControl(method = "cv", number = 5)
train(TARGET ~ .,data=sub_train ,method="rf",trControl= tr)
source("lib_func.R")
#setwd("/home/nazarov/07-competitions/02/scripts/")
setwd("/home/nick/01-projects/07-competitions/02/scripts/")
source("lib_func.R")
load('tun_train.RDA')
sub_train <- subSample(x, 0.02, top_N_features)$training
tr <- trainControl(method = "cv", number = 5)
train(TARGET ~ .,data=sub_train ,method="rf",trControl= tr)
sub_train <-createDataPartition(y = tun_train$TARGET,
## the outcome data are needed
p = .06,
## The percentage of data in the
## training set
list = FALSE)
load('tun_train.RDA')
set.seed(1)
sub_train <-createDataPartition(y = tun_train$TARGET,
## the outcome data are needed
p = .06,
## The percentage of data in the
## training set
list = FALSE)
tr <- trainControl(method = "cv", number = 5)
train(TARGET ~ .,data=sub_train[sub_train,] ,method="rf",trControl= tr)
load('tun_train.RDA')
set.seed(1)
sub_train <-createDataPartition(y = tun_train$TARGET,
## the outcome data are needed
p = .06,
## The percentage of data in the
## training set
list = FALSE)
tr <- trainControl(method = "cv", number = 5)
train(TARGET ~ .,data=tun_train[sub_train,] ,method="rf",trControl= tr)
sub_train <-createDataPartition(y = tun_train$TARGET,
## the outcome data are needed
p = .1,
## The percentage of data in the
## training set
list = FALSE)
tr <- trainControl(method = "cv", number = 5)
train(TARGET ~ .,data=tun_train[sub_train,] ,method="rf",trControl= tr)
