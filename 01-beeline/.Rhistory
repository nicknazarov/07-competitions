INNER JOIN queries ON(queries.query_id = batch_elements.query_id)
INNER JOIN documents ON (documents.doc_id = batch_elements.doc_id)
INNER JOIN batchs AS batchs2 ON (batch_elements.batch_id = batchs2.batch_id)
INNER JOIN scores ON (batch_elements.batch_element_id = scores.batch_element_id)
WHERE batchs.batch_name LIKE 'test%'
GROUP BY queries.query, documents.url, documents.doc_id
HAVING AVG(CASE score_code WHEN 2 THEN 4
WHEN 3 THEN 3
WHEN 4 THEN 2
WHEN 5 THEN 1
WHEN 6 THEN 0
ELSE NULL
END) IS NOT NULL
ORDER BY queries.query, meanScore DESC),
usefull_more_3 AS  (
SELECT all_queries.query
FROM all_queries
WHERE all_queries.meanScore>=2.6 AND all_queries.meanScore < 3.5
GROUP BY all_queries.query
HAVING   COUNT(all_queries.url)>3
ORDER BY all_queries.query)
SELECT all_queries.query, all_queries.url, all_queries.meanScore
FROM all_queries INNER JOIN usefull_more_3 ON (all_queries.query = vital_more_1.query )
WHERE (all_queries.meanScore>=2.6 AND all_queries.meanScore < 3.5)
")
# id заданий, у которых более 3 полезных документов
usefull.anom<-getDataFromDB("
WITH all_queries AS (SELECT queries.query, documents.url, AVG(CASE score_code WHEN 2 THEN 4
WHEN 3 THEN 3
WHEN 4 THEN 2
WHEN 5 THEN 1
WHEN 6 THEN 0
ELSE NULL
END) AS meanScore
FROM batch_to_query INNER JOIN batchs ON (batch_to_query.batch_id = batchs.batch_id)
INNER JOIN batch_elements ON (batch_to_query.query_id = batch_elements.query_id)
INNER JOIN queries ON(queries.query_id = batch_elements.query_id)
INNER JOIN documents ON (documents.doc_id = batch_elements.doc_id)
INNER JOIN batchs AS batchs2 ON (batch_elements.batch_id = batchs2.batch_id)
INNER JOIN scores ON (batch_elements.batch_element_id = scores.batch_element_id)
WHERE batchs.batch_name LIKE 'test%'
GROUP BY queries.query, documents.url, documents.doc_id
HAVING AVG(CASE score_code WHEN 2 THEN 4
WHEN 3 THEN 3
WHEN 4 THEN 2
WHEN 5 THEN 1
WHEN 6 THEN 0
ELSE NULL
END) IS NOT NULL
ORDER BY queries.query, meanScore DESC),
usefull_more_3 AS  (
SELECT all_queries.query
FROM all_queries
WHERE all_queries.meanScore>=2.6 AND all_queries.meanScore < 3.5
GROUP BY all_queries.query
HAVING   COUNT(all_queries.url)>3
ORDER BY all_queries.query)
SELECT all_queries.query, all_queries.url, all_queries.meanScore
FROM all_queries INNER JOIN usefull_more_3 ON (all_queries.query = vital_more_1.query )
WHERE (all_queries.meanScore>=2.6 AND all_queries.meanScore < 3.5)
")
# id заданий, у которых более 3 полезных документов
usefull.anom<-getDataFromDB("
WITH all_queries AS (SELECT queries.query, documents.url, AVG(CASE score_code WHEN 2 THEN 4
WHEN 3 THEN 3
WHEN 4 THEN 2
WHEN 5 THEN 1
WHEN 6 THEN 0
ELSE NULL
END) AS meanScore
FROM batch_to_query INNER JOIN batchs ON (batch_to_query.batch_id = batchs.batch_id)
INNER JOIN batch_elements ON (batch_to_query.query_id = batch_elements.query_id)
INNER JOIN queries ON(queries.query_id = batch_elements.query_id)
INNER JOIN documents ON (documents.doc_id = batch_elements.doc_id)
INNER JOIN batchs AS batchs2 ON (batch_elements.batch_id = batchs2.batch_id)
INNER JOIN scores ON (batch_elements.batch_element_id = scores.batch_element_id)
WHERE batchs.batch_name LIKE 'test%'
GROUP BY queries.query, documents.url, documents.doc_id
HAVING AVG(CASE score_code WHEN 2 THEN 4
WHEN 3 THEN 3
WHEN 4 THEN 2
WHEN 5 THEN 1
WHEN 6 THEN 0
ELSE NULL
END) IS NOT NULL
ORDER BY queries.query, meanScore DESC),
usefull_more_3 AS  (
SELECT all_queries.query
FROM all_queries
WHERE all_queries.meanScore>=2.6 AND all_queries.meanScore < 3.5
GROUP BY all_queries.query
HAVING   COUNT(all_queries.url)>3
ORDER BY all_queries.query)
SELECT all_queries.query, all_queries.url, all_queries.meanScore
FROM all_queries INNER JOIN usefull_more_3 ON (all_queries.query = usefull_more_3.query )
WHERE (all_queries.meanScore>=2.6 AND all_queries.meanScore < 3.5)
")
View(usefull.anom)
scores <- getDataFromDB("
SELECT  * FROM scores
")
library(DT)
scores <- getDataFromDB("
SELECT  * FROM scores
")
library(RPostgreSQL)
library(DT)
scores <- getDataFromDB("
SELECT  * FROM scores
")
scores <- getDataFromDB("
SELECT  * FROM scores
")
library(RPostgreSQL)
getDataFromDB <- function(query) {
# Функция получения данных по sql запросу
# Args:
#   query: sql запрос
# Returns:
#   ДатаФрейм с результатами запроса
database="assessment"
conection <- dbConnect(PostgreSQL(), user= "analyst", password="analyst_ltr",
dbname=database, host="searchqa-db.search.km")
sqlResults <- dbSendQuery(conection, query)
data <- fetch(sqlResults, n=-1)
dbClearResult(sqlResults)
dbDisconnect(conection)
return(data)
}
scores <- getDataFromDB("
SELECT  * FROM scores
")
View(scores)
batchs<- getDataFromDB("
SELECT  * FROM batchs
")
batch_elements<- getDataFromDB("
SELECT  * FROM batch_elements
")
stuff <- list(scores =scores , batchs=batchs, batch_elements=batch_elements)  # список ценных объектов
saveRDS(file = "assessors_v1.RDS",stuff) # сохраняем всё ценное в файл
mylist <- readRDS("assessors_v1.RDS.RDS") # читаем из файла что там есть
mylist <- readRDS("assessors_v1.RDS") # читаем из файла что там есть
dat<-mylist [[1]]
View(dat)
library(RPostgreSQL)
library(DT)
library(RPostgreSQL)
getDataFromDB <- function(query) {
# Функция получения данных по sql запросу
# Args:
#   query: sql запрос
# Returns:
#   ДатаФрейм с результатами запроса
database="assessment"
conection <- dbConnect(PostgreSQL(), user= "analyst", password="analyst_ltr",
dbname=database, host="searchqa-db.search.km")
sqlResults <- dbSendQuery(conection, query)
data <- fetch(sqlResults, n=-1)
dbClearResult(sqlResults)
dbDisconnect(conection)
return(data)
}
scores <- getDataFromDB("
SELECT  * FROM scores
")
stuff <- list(scores =scores)  # список ценных объектов
saveRDS(file = "assessors_v2.RDS",stuff) # сохраняем всё ценное в файл
mylist <- readRDS("assessors_v2.RDS") # читаем из файла что там есть
data.scores<-mylist [[1]]
assessor.id <- getDataFromDB("
SELECT DISTINCT assess_id FROM scores
")
View(assessor.id)
View(assessor.id)
assessor.id <- getDataFromDB("
SELECT DISTINCT assess_id FROM scores SORT BY assess_id
")
assessor.id <- getDataFromDB("
SELECT DISTINCT assess_id FROM scores SORTED BY assess_id
")
assessor.id <- getDataFromDB("
SELECT DISTINCT assess_id FROM scores ORDER BY assess_id
")
View(assessor.id)
require(stats)
by(warpbreaks[, 1:2], warpbreaks[,"tension"], summary)
warpbreaks
View(scores)
View(scores)
coherence.table <- data.frame(1,1,1,1)
colnames(coherence.table) <- c("First_assessor","Second_assessor","N","Coeff_of_coherence")
for (i in 1:(nrow(assessor.id)-1) ){
left.table <- scores [assess_id==assessor.id[i]]
for (k in (i+1):nrow(assessor.id) ){
right.table <- scores [assess_id==assessor.id[k]]
result.merge.table <- merge(x = left.table[,c(2,8,9)], y = right.table[,c(2,8,9)], by = "batch_element_id", all = TRUE)
common.marks <- result.merge.table[,3]-result.merge.table[,6]
coher <- length(common.marks[common.marks==0])
coherence.table <- list(assessor.id[i], assessor.id[k], nrow(result.merge.table), coher/ nrow(result.merge.table)*100)
}
}
coherence.table <- data.frame(1,1,1,1)
colnames(coherence.table) <- c("First_assessor","Second_assessor","N","Coeff_of_coherence")
for (i in 1:(nrow(assessor.id)-1) ){
left.table <- scores [left.table$assess_id==assessor.id[i]]
for (k in (i+1):nrow(assessor.id) ){
right.table <- scores [right.table$assess_id==assessor.id[k]]
result.merge.table <- merge(x = left.table[,c(2,8,9)], y = right.table[,c(2,8,9)], by = "batch_element_id", all = TRUE)
common.marks <- result.merge.table[,3]-result.merge.table[,6]
coher <- length(common.marks[common.marks==0])
coherence.table <- list(assessor.id[i], assessor.id[k], nrow(result.merge.table), coher/ nrow(result.merge.table)*100)
}
}
#data.scores<-mylist [[1]]
coherence.table <- data.frame(1,1,1,1)
colnames(coherence.table) <- c("First_assessor","Second_assessor","N","Coeff_of_coherence")
for (i in 1:(nrow(assessor.id)-1) ){
left.table <- scores [scores$assess_id==assessor.id[i]]
for (k in (i+1):nrow(assessor.id) ){
right.table <- scores [scores$assess_id==assessor.id[k]]
result.merge.table <- merge(x = left.table[,c(2,8,9)], y = right.table[,c(2,8,9)], by = "batch_element_id", all = TRUE)
common.marks <- result.merge.table[,3]-result.merge.table[,6]
coher <- length(common.marks[common.marks==0])
coherence.table <- list(assessor.id[i], assessor.id[k], nrow(result.merge.table), coher/ nrow(result.merge.table)*100)
}
}
#data.scores<-mylist [[1]]
coherence.table <- data.frame(1,1,1,1)
colnames(coherence.table) <- c("First_assessor","Second_assessor","N","Coeff_of_coherence")
for (i in 1:(nrow(assessor.id)-1) ){
left.table <- scores [scores$assess_id==assessor.id[i]]
for (k in (i+1):nrow(assessor.id) ){
right.table <- scores [scores$assess_id==assessor.id[k]]
result.merge.table <- merge(x = left.table[,c(2,8,9)], y = right.table[,c(2,8,9)], by = "batch_element_id", all = TRUE)
common.marks <- result.merge.table[,3]-result.merge.table[,6]
coher <- length(common.marks[common.marks==0])
coherence.table <- list(assessor.id[i], assessor.id[k], nrow(result.merge.table), coher/ nrow(result.merge.table)*100)
}
print(i)
}
#data.scores<-mylist [[1]]
coherence.table <- data.frame(1,1,1,1)
colnames(coherence.table) <- c("First_assessor","Second_assessor","N","Coeff_of_coherence")
for (i in 1:(nrow(assessor.id)-1) ){
left.table <- scores [scores$assess_id==assessor.id[i]]
for (k in (i+1):nrow(assessor.id) ){
print(k)
right.table <- scores [scores$assess_id==assessor.id[k]]
result.merge.table <- merge(x = left.table[,c(2,8,9)], y = right.table[,c(2,8,9)], by = "batch_element_id", all = TRUE)
common.marks <- result.merge.table[,3]-result.merge.table[,6]
coher <- length(common.marks[common.marks==0])
coherence.table <- list(assessor.id[i], assessor.id[k], nrow(result.merge.table), coher/ nrow(result.merge.table)*100)
}
}
#saveRDS(file = "assessors_v2.RDS",stuff) # сохраняем всё ценное в файл
#mylist <- readRDS("assessors_v2.RDS") # читаем из файла что там есть
#data.scores<-mylist [[1]]
coherence.table <- data.frame(1,1,1,1)
colnames(coherence.table) <- c("First_assessor","Second_assessor","N","Coeff_of_coherence")
for (i in 1:(nrow(assessor.id)-1) ){
left.table <- scores [scores$assess_id==assessor.id[i]]
for (k in (i+1):nrow(assessor.id) ){
print(k)
right.table <- scores [scores$assess_id==assessor.id[k]]
if (nrow( right.table )!=0){
result.merge.table <- merge(x = left.table[,c(2,8,9)], y = right.table[,c(2,8,9)], by = "batch_element_id", all = TRUE)
common.marks <- result.merge.table[,3]-result.merge.table[,6]
coher <- length(common.marks[common.marks==0])
coherence.table <- list(assessor.id[i], assessor.id[k], nrow(result.merge.table), coher/ nrow(result.merge.table)*100)
}
else{
coherence.table <- list(assessor.id[i], assessor.id[k], 0, 0)
}
}
}
coherence.table <- data.frame(1,1,1,1)
colnames(coherence.table) <- c("First_assessor","Second_assessor","N","Coeff_of_coherence")
for (i in 1:(nrow(assessor.id)-1) ){
left.table <- scores [scores$assess_id==assessor.id[i]]
for (k in (i+1):nrow(assessor.id) ){
print(k)
flush.console()
right.table <- scores [scores$assess_id==assessor.id[k]]
if (nrow( right.table )!=0){
result.merge.table <- merge(x = left.table[,c(2,8,9)], y = right.table[,c(2,8,9)], by = "batch_element_id", all = TRUE)
common.marks <- result.merge.table[,3]-result.merge.table[,6]
coher <- length(common.marks[common.marks==0])
coherence.table <- list(assessor.id[i], assessor.id[k], nrow(result.merge.table), coher/ nrow(result.merge.table)*100)
}
else{
coherence.table <- list(assessor.id[i], assessor.id[k], 0, 0)
}
}
}
View(assessor.id)
#data.scores<-mylist [[1]]
coherence.table <- data.frame(1,1,1,1)
colnames(coherence.table) <- c("First_assessor","Second_assessor","N","Coeff_of_coherence")
for (i in 1:(nrow(assessor.id)-1) ){
left.table <- scores [scores$assess_id==assessor.id[i,1]]
for (k in (i+1):nrow(assessor.id) ){
print(k)
flush.console()
right.table <- scores [scores$assess_id==assessor.id[k,1]]
if (nrow( right.table )!=0){
result.merge.table <- merge(x = left.table[,c(2,8,9)], y = right.table[,c(2,8,9)], by = "batch_element_id", all = TRUE)
common.marks <- result.merge.table[,3]-result.merge.table[,6]
coher <- length(common.marks[common.marks==0])
coherence.table <- list(assessor.id[i], assessor.id[k], nrow(result.merge.table), coher/ nrow(result.merge.table)*100)
}
else{
coherence.table <- list(assessor.id[i], assessor.id[k], 0, 0)
}
}
}
assessor.id[1,1]
assessor.id[2,1]
scores$assess_id
scores [scores$assess_id==assessor.id[1,1]]
#! /usr/bin/R --no-restore --no-save -f
#############################################################################
# Загрузка
#setwd("/home/nazarov/task_5/RankingAnalysis")
source("R/Boot.R")
libraryBoot()
sourceBoot()
#############################################################################
# Константы
# Путь к learn обучения
#LEARN_PATH <- "~/WebExperimentClean/data_set_test.txt"
#LEARN_PATH <- "/home/nazarov/task_5/29_old/PP_our_asess_old+new.txt"
LEARN_PATH <- "/home/nazarov/task_7/mihailov/data_set_all_processsed.txt"
#############################################################################
# Фиксация рандома
set.seed(481516)
#############################################################################
# Чтение данных
print(sprintf("%s Start", Sys.time()))
data <- readDataset(LEARN_PATH)
rankingData <- data$features
metaData <- data$meta
relevanceDiscr <- cut(x=rankingData$RelevanceScore, breaks=c(0, 0.5, 1.5, 2.5, 3.5, 4.0), include.lowest=TRUE)
rankingData <- cbind(rankingData, RelevanceDiscr=relevanceDiscr)
#############################################################################
# Подсчет необходимых статистик
uniqueNumberInFeature <- apply(rankingData, MARGIN=2, FUN=function(column) return(length(unique(column))))
unaryFeatureIndex <- which(uniqueNumberInFeature == 1)
binaryFeatureIndex <- which(uniqueNumberInFeature == 2)
discreteFeatureIndex <- which(uniqueNumberInFeature > 2 & uniqueNumberInFeature <= 15)
continuosFeatureIndex <- setdiff(3:ncol(rankingData), which(uniqueNumberInFeature <= 15))
# dataToBind <- cbind(metaData[, c(1, 3)], RelevanceScore=rankingData$RelevanceScore)
# queryGroop <- split(x=dataToBind, f=rankingData$QueryId)
#
# relQueryQuality <- sapply(queryGroop, FUN=function(data) { x <- sum(data$RelevanceScore >= 1.5); return(x)})
# queriesFirst <- sapply(queryGroop[relQueryQuality == 0], FUN=function(data) { return(data[1, 1])})
#
# relQueryQuality <- sapply(queryGroop, FUN=function(data) { x <- sum(data$RelevanceScore >= 2.0); return(x)})
# queriesSecond <- sapply(queryGroop[relQueryQuality == 0], FUN=function(data) { return(data[1, 1])})
# queriesSecond <- setdiff(queriesSecond, queriesFirst)
#
# relQueryQuality <- sapply(queryGroop, FUN=function(data) { x <- sum(data$RelevanceScore >= 2.5); return(x)})
# queriesThird <- sapply(queryGroop[relQueryQuality == 0], FUN=function(data) { return(data[1, 1])})
# queriesThird <- setdiff(queriesThird, union(queriesFirst, queriesSecond))
#############################################################################
# Генерация html кода и рассылка на почту
knit(input="R/ExpAnalysis.rmd", output="ExpAnalysis.md", encoding='UTF-8')
markdownToHTML("ExpAnalysis.md", "results/ExpAnalysis.html", stylesheet="data/custom.css")
file.remove("ExpAnalysis.md")
# paramsList <- list()
# paramsList$fromAddress <- c("-f 'sputnikanal@gmail.com'")
# paramsList$toAddress <- c("-t 'sputnikanal@gmail.com'")
# paramsList$emailSubject <- c("-u DataSet predAnalys Results")
# #paramsList$listemailMessage <- c("-m ")
# paramsList$serverAndPort <- c("-s 'smtp.gmail.com:25'")
# paramsList$fileAttachPath <- c("-a results/ExpAnalys.html")
# paramsList$accUsername <- c("-xu sputnikanal@gmail.com")
# paramsList$accPassword <- c("-xp sputnik1234")
#
# command <- paste(paramsList, collapse = " ")
# command <- paste("sendEmail", command,sep = " ")
# system(command, intern=T, wait=T)
#############################################################################
# Вывод плохих запросов
#write.table(row.names=FALSE, col.names=FALSE, file="results/quiriesBadFirst.txt", queriesFirst, quote=FALSE)
#write.table(row.names=FALSE, col.names=FALSE, file="results/quiriesBadSecond.txt", queriesSecond, quote=FALSE)
#write.table(row.names=FALSE, col.names=FALSE, file="results/quiriesBadThird.txt", queriesThird, quote=FALSE)
#! /usr/bin/R --no-restore --no-save -f
#############################################################################
# Загрузка
setwd("/home/nazarov/task_7/RankingAnalysis")
source("R/Boot.R")
libraryBoot()
sourceBoot()
#############################################################################
# Константы
# Путь к learn обучения
#LEARN_PATH <- "~/WebExperimentClean/data_set_test.txt"
#LEARN_PATH <- "/home/nazarov/task_5/29_old/PP_our_asess_old+new.txt"
LEARN_PATH <- "/home/nazarov/task_7/mihailov/data_set_all_processsed.txt"
#############################################################################
# Фиксация рандома
set.seed(481516)
#############################################################################
# Чтение данных
print(sprintf("%s Start", Sys.time()))
data <- readDataset(LEARN_PATH)
rankingData <- data$features
metaData <- data$meta
relevanceDiscr <- cut(x=rankingData$RelevanceScore, breaks=c(0, 0.5, 1.5, 2.5, 3.5, 4.0), include.lowest=TRUE)
rankingData <- cbind(rankingData, RelevanceDiscr=relevanceDiscr)
#############################################################################
# Подсчет необходимых статистик
uniqueNumberInFeature <- apply(rankingData, MARGIN=2, FUN=function(column) return(length(unique(column))))
unaryFeatureIndex <- which(uniqueNumberInFeature == 1)
binaryFeatureIndex <- which(uniqueNumberInFeature == 2)
discreteFeatureIndex <- which(uniqueNumberInFeature > 2 & uniqueNumberInFeature <= 15)
continuosFeatureIndex <- setdiff(3:ncol(rankingData), which(uniqueNumberInFeature <= 15))
# dataToBind <- cbind(metaData[, c(1, 3)], RelevanceScore=rankingData$RelevanceScore)
# queryGroop <- split(x=dataToBind, f=rankingData$QueryId)
#
# relQueryQuality <- sapply(queryGroop, FUN=function(data) { x <- sum(data$RelevanceScore >= 1.5); return(x)})
# queriesFirst <- sapply(queryGroop[relQueryQuality == 0], FUN=function(data) { return(data[1, 1])})
#
# relQueryQuality <- sapply(queryGroop, FUN=function(data) { x <- sum(data$RelevanceScore >= 2.0); return(x)})
# queriesSecond <- sapply(queryGroop[relQueryQuality == 0], FUN=function(data) { return(data[1, 1])})
# queriesSecond <- setdiff(queriesSecond, queriesFirst)
#
# relQueryQuality <- sapply(queryGroop, FUN=function(data) { x <- sum(data$RelevanceScore >= 2.5); return(x)})
# queriesThird <- sapply(queryGroop[relQueryQuality == 0], FUN=function(data) { return(data[1, 1])})
# queriesThird <- setdiff(queriesThird, union(queriesFirst, queriesSecond))
#############################################################################
# Генерация html кода и рассылка на почту
knit(input="R/ExpAnalysis.rmd", output="ExpAnalysis.md", encoding='UTF-8')
markdownToHTML("ExpAnalysis.md", "results/ExpAnalysis.html", stylesheet="data/custom.css")
file.remove("ExpAnalysis.md")
# paramsList <- list()
# paramsList$fromAddress <- c("-f 'sputnikanal@gmail.com'")
# paramsList$toAddress <- c("-t 'sputnikanal@gmail.com'")
# paramsList$emailSubject <- c("-u DataSet predAnalys Results")
# #paramsList$listemailMessage <- c("-m ")
# paramsList$serverAndPort <- c("-s 'smtp.gmail.com:25'")
# paramsList$fileAttachPath <- c("-a results/ExpAnalys.html")
# paramsList$accUsername <- c("-xu sputnikanal@gmail.com")
# paramsList$accPassword <- c("-xp sputnik1234")
#
# command <- paste(paramsList, collapse = " ")
# command <- paste("sendEmail", command,sep = " ")
# system(command, intern=T, wait=T)
#############################################################################
# Вывод плохих запросов
#write.table(row.names=FALSE, col.names=FALSE, file="results/quiriesBadFirst.txt", queriesFirst, quote=FALSE)
#write.table(row.names=FALSE, col.names=FALSE, file="results/quiriesBadSecond.txt", queriesSecond, quote=FALSE)
#write.table(row.names=FALSE, col.names=FALSE, file="results/quiriesBadThird.txt", queriesThird, quote=FALSE)
#! /usr/bin/R --no-restore --no-save -f
#############################################################################
# Загрузка
setwd("/home/nazarov/task_7/RankingAnalysis")
source("R/Boot.R")
libraryBoot()
sourceBoot()
setwd("/home/nazarov/task_7/RankingAnalysis")
###########################################################################################
#1) Загрузка данных
setwd("/home/nazarov/07-конкурсы/01-beeline/")
mylist <- readRDS("beeline_v1.RDS") # читаем из файла что там есть
###########################################################################################
data.set<- mylist[[1]]
mis <- data.set[40,]
mis <- data.set[1:40,]
library(rrcovNA)
install.packages("rrcovNA")
summary(mis)
imputed.mis <- impSeq(mis)
library(rrcovNA)
install.packages("rrcovNA")
library(rrcovNA)
imputed.mis <- impSeq(mis)
summary(imputed.b10)
summary(imputed.mis)
imputed.mis <- sa.data.frame(impSeq(mis))
imputed.mis <- as.data.frame(impSeq(mis))
View(imputed.mis)
View(mis)
mis [c(23,5,8),5] <-NA
View(mis)
imputed.mis <- as.data.frame(impSeq(mis))
View(imputed.mis)
install.packages("SeqKnn")
library(SeqKnn)
install.packages("/home/nazarov/SeqKnn_1.0.1.tar.gz", repos = NULL, type="source")
library(SeqKnn)
install.packages("/home/nazarov/SeqKnn_1.0.0.tar.gz", repos = NULL, type="source")
R CMD INSTALL /home/nazarov/SeqKnn_1.0.1.tar.gz
INSTALL /home/nazarov/SeqKnn_1.0.1.tar.gz
CMD INSTALL /home/nazarov/SeqKnn_1.0.1.tar.gz
install.packages("DMwR")
mis [c(23,5,8),5] <-NA
imputed.mis <- knnImputation(mis, 3)
library(DMwR)
imputed.mis <- knnImputation(mis, 3)
imputed.mis <- knnImputation(mis, 2)
mis <- data.set[1:400,]
mis [c(23,5,8),5] <-NA
imputed.mis <- knnImputation(mis, 3)
View(imputed.mis)
round(mis [,5] )
round(imputed.mis  [,5] )
View(data.set)
imputed.mis <- knnImputation(mis, 5)
round(imputed.mis  [,5] )
knn.data.set <- knnImputation(data.set, 3)
